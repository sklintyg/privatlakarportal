apply plugin: 'org.gretty'
apply plugin: 'com.netflix.nebula.grunt'
apply plugin: 'idea'
apply plugin: 'war'

def buildDirectory = project.layout.buildDirectory.get().asFile

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8060 + (instance as Integer)
    def useInternalHttpPort = 8160 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"

    servletContainer = 'tomcat10'
    contextPath = '/'

    integrationTestTask = null
    scanInterval = 0
    debugPort = 8860 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    enableNaming = true
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = [
            "-Dcatalina.base=${buildDirectory}/catalina.base",
            "-Dspring.profiles.active=dev,caching-enabled,hsa-integration-intyg-proxy-service,testability",
            "-Dlogback.file=${applicationDir}/config/logback-spring.xml",
            "-Djava.awt.headless=true",
            "-Dfile.encoding=UTF-8",
            "-Dapplication.dir=${applicationDir}",
            "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
            "-Ddev.http.port=${useHttpPort}",
            "-Ddev.http.port.internal=${useInternalHttpPort}"
    ]
}

test {
    environment "catalina.base", "${buildDirectory}/catalina.base"
}

war.rootSpec.exclude "logback.xml"

tasks.register('restAssuredTest', Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: 'http://localhost:8060/'
    systemProperty "integration.tests.actuatorUrl", System.properties['actuatorUrl'] ?: "http://localhost:8160"
    include '**/*IT*'
    useJUnitPlatform()
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else if (project.hasProperty('useNoMinifiedJavaScriptNoKarma')) {
    war.dependsOn grunt_build_no_minify_no_karma
} else {
    war.dependsOn grunt_build_no_minify
}

grunt { colors = true }
test { exclude '**/*IT*' }

grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall
grunt_build_no_minify_no_karma.dependsOn npmInstall

dependencies {
    implementation project(":privatlakarportal-common")
    implementation project(":privatlakarportal-hsa-integration")
    implementation project(":privatlakarportal-persistence")
    implementation project(":privatlakarportal-wc-integration")
    implementation project(":privatlakarportal-logging")

    implementation "co.elastic.logging:logback-ecs-encoder:${logbackEcsEncoderVersion}"

    implementation "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    implementation "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    implementation "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    implementation "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"
    implementation "se.inera.intyg.infra:pu-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:postnummerservice-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:privatepractitioner:${infraVersion}"
    implementation "se.inera.intyg.infra:security-filter:${infraVersion}"
    implementation "se.inera.intyg.infra:security-common:${infraVersion}"

    implementation "com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "jakarta.ws.rs:jakarta.ws.rs-api"
    implementation "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"
    implementation 'org.springframework.security:spring-security-saml2-service-provider'
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-core"
    implementation "org.springframework.session:spring-session-data-redis"
    implementation "org.springframework.data:spring-data-jpa"
    implementation "org.springframework:spring-webmvc"
    implementation 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    implementation 'org.apache.taglibs:taglibs-standard-spec:1.2.5'
    implementation "org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1"
    implementation "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0"

    compileOnly "jakarta.persistence:jakarta.persistence-api"
    testCompileOnly "jakarta.persistence:jakarta.persistence-api"

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly "com.mysql:mysql-connector-j"
    runtimeOnly "se.inera.intyg.infra:hsa-integration-intyg-proxy-service:${infraVersion}"

    testImplementation "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.antlr:ST4:${stAntlr4Version}"
    testImplementation "io.rest-assured:rest-assured"
}