apply plugin: 'com.netflix.nebula.grunt'
apply plugin: 'org.gretty'
apply plugin: 'idea'
apply plugin: 'war'

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8060 + (instance as Integer)
    def useInternalHttpPort = 8160 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"

    servletContainer = 'tomcat9'
    contextPath = '/'

    integrationTestTask = null
    scanInterval = 0
    debugPort = 8860 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = [
            "-Dcatalina.base=${project.layout.buildDirectory.get().asFile}/catalina.base",
            "-Dspring.profiles.active=dev,caching-enabled",
            "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
            "-Djava.awt.headless=true",
            "-Dfile.encoding=UTF-8",
            "-Dapplication.dir=${applicationDir}",
            "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
            "-Ddev.http.port=${useHttpPort}",
            "-Ddev.http.port.internal=${useInternalHttpPort}"]

    dependencies {
        implementation "org.glassfish.web:jakarta.servlet.jsp.jstl"
        implementation "se.inera.intyg.refdata:refdata:${refDataVersion}"
    }
}

tasks.register('restAssuredTest', Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: 'http://localhost:8060/'
    systemProperty "integration.tests.actuatorUrl", System.properties['actuatorUrl'] ?: "http://localhost:8160"
    include '**/*IT*'
    useJUnitPlatform()
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else if (project.hasProperty('useNoMinifiedJavaScriptNoKarma')) {
    war.dependsOn grunt_build_no_minify_no_karma
} else {
    war.dependsOn grunt_build_no_minify
}

grunt { colors = true }
test { exclude '**/*IT*' }

grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall
grunt_build_no_minify_no_karma.dependsOn npmInstall
war.dependsOn createVersionPropertyFile

dependencies {
    implementation project(":privatlakarportal-common")
    implementation project(":privatlakarportal-hsa-integration")
    implementation project(":privatlakarportal-persistence")
    implementation project(":privatlakarportal-wc-integration")

    implementation "se.inera.intyg.infrastructure.directory.privatepractitioner.terms:intyg-infrastructure-directory-privatepractitioner-terms-schemas:${ppTermsSchemasVersion}"
    implementation "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    implementation "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    implementation "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    implementation "se.inera.intyg.infra:hsatk-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"
    implementation "se.inera.intyg.infra:pu-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:postnummerservice-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:privatepractitioner:${infraVersion}"
    implementation "se.inera.intyg.infra:security-filter:${infraVersion}"
    implementation "se.inera.intyg.infra:security-common:${infraVersion}"

    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    implementation "io.prometheus:simpleclient_servlet"
    implementation "jakarta.ws.rs:jakarta.ws.rs-api"
    implementation "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    implementation "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springframework.boot:spring-boot:${springbootMavenBomVersion}"
    implementation "org.springframework.boot:spring-boot-autoconfigure:${springbootMavenBomVersion}"
    implementation "org.springframework.data:spring-data-jpa"
    implementation "org.springframework.security.extensions:spring-security-saml2-core:${springSecurityExtensionsVersion}"
    implementation "org.springframework.session:spring-session-data-redis"
    implementation "org.springframework:spring-webmvc"

    compileOnly "jakarta.persistence:jakarta.persistence-api"
    testCompileOnly "jakarta.persistence:jakarta.persistence-api"

    runtimeOnly "com.mysql:mysql-connector-j"

    testImplementation "org.assertj:assertj-core"
    testImplementation "org.antlr:ST4:${stAntlr4Version}"
    testImplementation "io.rest-assured:rest-assured"
}
