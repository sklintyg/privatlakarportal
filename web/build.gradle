apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: 'http://localhost:8090/'
    include '**/*IT*'
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else {
    war.dependsOn grunt_build_no_minify
}

war.dependsOn createVersionPropertyFile

grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall

gretty {
    servletContainer = 'tomcat9'
    contextPath = '/'

    integrationTestTask = null
    scanInterval = 0
    httpPort = 8090
    debugPort = 5010
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'

    jvmArgs = ['-Dspring.profiles.active=dev,caching-enabled',
               '-Dlogback.file=classpath:logback-dev.xml',
               '-Dconfig.file=' + projectDir + '/src/main/resources/dev.properties',
               '-Dmailresource.file=' + projectDir + '/src/main/resources/dev.mailresource.properties',
               '-Dcredentials.file=' + projectDir + '/src/main/resources/dev-credentials.properties',
               '-Dresources.folder=classpath:']
}

dependencies {
    compile project(":privatlakarportal-wc-integration")

    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"
    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"
    compile "se.inera.intyg.infra:postnummerservice-integration:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"
    compile "se.inera.intyg.infra:security-common:${infraVersion}"

    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"

    compile "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"
    compile "org.springframework:spring-webmvc"
    compile "org.springframework.ws:spring-ws-core"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecurityExtensionsVersion}"
    compile "org.springframework.security:spring-security-web"
    compile "org.springframework.session:spring-session-data-redis"
    compile "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    compile "wsdl4j:wsdl4j"
    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    compile("io.swagger:swagger-jaxrs:${swaggerJaxrsVersion}") {
        exclude(module: "jsr311-api")
        transitive = false
    }

    compile "mysql:mysql-connector-java"

    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api"

    testCompile "org.hamcrest:hamcrest"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.unitils:unitils-core:${unitilsVersion}"
    testCompile "org.antlr:ST4:${stringTemplateVersion}"

    testCompile "io.rest-assured:rest-assured"
    testCompile "io.rest-assured:json-schema-validator"
    testCompile "com.sun.xml.bind:jaxb-osgi:${jaxbOsgiVersion}" // Can remove when rest-assured in BOM > version 4.0

    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
