apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: org.gradle.api.tasks.testing.Test) {
    systemProperties['integration.tests.baseUrl'] =  'http://localhost:8090/'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

idea {
    module {
        //and some extra test source dirs
        scopes.TEST.plus += [ configurations.integrationTestCompile, configurations.integrationTestRuntime ]
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}


grunt {
    colors = true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
}

if (project.hasProperty('privatlakarportal.useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
}
else {
    war.dependsOn grunt_build_no_minify
}



task assembleManifestClasspath() << {
    war {
        manifest {
            def buildNumber = System.env.BUILD_NUMBER != null ? System.env.BUILD_NUMBER : '1.0.0-SNAPSHOT'
            attributes("Build": buildNumber)
            def gitRevision = System.env.GIT_COMMIT != null ? System.env.GIT_COMMIT : 'Local-build'
            attributes("Git-revision" : gitRevision)
            attributes("Build-Time": new Date())
        }
    }
}

war.dependsOn assembleManifestClasspath

task bowerInstall(type: NodeTask, dependsOn:npmInstall) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('src/main/webapp/bower_components')
}

grunt_build.dependsOn bowerInstall
grunt_build_no_minify.dependsOn bowerInstall

gretty {
    httpPort = 8090
    contextPath = '/'
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"
    jvmArgs = [
        '-Dspring.profiles.active=dev',
        '-Dprivatlakarportal.config.file=' + projectDir + '/src/main/resources/dev.properties',
        '-Dprivatlakarportal.mailresource.file=' + projectDir + '/src/main/resources/dev.mailresource.properties',
        '-Dcredentials.file=' + projectDir + '/src/main/resources/dev-credentials.properties',
        '-Dprivatlakarportal.resources.folder=/' +projectDir + '/src/main/resources',
        '-XX:MaxPermSize=256M'
    ]
    fastReload = true
    inplaceMode = 'hard'
    scanInterval = 0
}

dependencies {
    compile project(":privatlakarportal-persistence")
    compile project(":privatlakarportal-hsa-integration")
    compile project(":privatlakarportal-pu-integration")
    compile project(":privatlakarportal-wc-integration")
    compile project(":privatlakarportal-common")
    
    compile "org.springframework:spring-webmvc:${springContextVersion}"
    compile "org.springframework.ws:spring-ws-core:2.2.2.RELEASE"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecurityExtensionsVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'wsdl4j:wsdl4j:1.6.3'
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.apache.commons:commons-lang3:3.1'

    compile('io.swagger:swagger-jaxrs:1.5.4') {
        transitive = false;
    }
    compile("io.springfox:springfox-swagger2:2.4.0") 
    compile('io.springfox:springfox-swagger-ui:2.4.0')

    compile 'se.riv.itintegration.monitoring:itintegration-monitoring-schemas:1.0.0.3'

    compile 'org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}'
    compile 'org.apache.cxf:cxf-rt-transports-http:${cxfVersion}'

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile ("junit:junit:${junitVersion}") {
        exclude module : "hamcrest"
        exclude module : "hamcrest-core"
    }
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile "org.springframework:spring-test:${springContextVersion}"
    testCompile 'org.unitils:unitils-core:3.3'

    testCompile "org.antlr:ST4:${stringTemplateVersion}"

    integrationTestCompile "com.jayway.restassured:rest-assured:${restAssuredVersion}"
    integrationTestCompile "com.jayway.restassured:json-schema-validator:${restAssuredVersion}"
    
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedCompile 'jstl:jstl:1.2'
}