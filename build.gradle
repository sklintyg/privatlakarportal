plugins {
    id "io.spring.dependency-management" version "1.1.3" apply false
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "org.gretty" version "3.0.9" apply false
    id 'test-report-aggregation'
    id 'org.sonarqube' version '5.1.0.4882'
    id "org.owasp.dependencycheck" version "10.0.4"
    id 'jacoco'
}

ext {
    infraVersion = System.properties['infraVersion'] ?: '3.21.0-SNAPSHOT'

    ppSchemasVersion = "1.0.5.1"
    ppTermsSchemasVersion = "1.0.5.1"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.5.1"
    schemasContractVersion = "2.1.8.1"

    commonsIOVersion = "2.14.0"
    cxfVersion = "3.6.2"
    geronimoJmsVersion = "1.1.1"
    guavaVersion = "32.1.3-jre"
    jadiraUserTypeVersion = "6.0.1.GA"
    jakartaJwsApiVersion = "2.1.0" // version 3.0.0 -> warning: "class file for javax.jws.soap.SOAPBinding$ParameterStyle not found"
    jaxb2Version = "0.13.1"
    jsonSimpleVersion = "1.1.1"
    picocliVersion = "4.7.5"
    springSecurityExtensionsVersion = "1.0.3.RELEASE"
    stAntlr4Version = "4.3.4"
    springDocVersion = "1.7.0"
    shedlockSpringVersion = "4.46.0"

    nodeJsVersion = "12.22.12"
    npmVersion = "6.14.16"

    springbootMavenBomVersion = "2.7.17"

    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'
}

allprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java'
    apply plugin: 'jacoco'

    group = 'se.inera.privatlakarportal'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports { mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}" }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "javax.annotation:javax.annotation-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"

        runtimeOnly "com.sun.xml.messaging.saaj:saaj-impl"

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation "junit:junit"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.springframework:spring-test"

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    test { useJUnitPlatform() }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }

        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/testability/**",
                        "**/integrationtest/**"
                ])
            }))
        }
    }
}

reporting {
    subprojects.collect { subproject -> subproject.name }.each { subprojectName ->
        dependencies { testReportAggregation project(":${subprojectName}") }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "intyg-statistik"
        property "sonar.projectName", "intyg-statistik"
        property "sonar.dependencyCheck.jsonReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.json" as String
        property "sonar.dependencyCheck.htmlReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.html" as String
    }
}

dependencyCheck {
    formats = List.of("HTML", "JSON")
    nvd.setDatafeedUrl(nvdMirror)
    analyzers.setAssemblyEnabled(false)
}