// Load environment specific settings, if the -Penv=xxx parameter is given on invocation
task loadConfiguration {
    def environment = null
    if (project.hasProperty('env')) {
        environment = project.getProperty('env')
    } else {
        environment = "local"
    }
    logger.quiet "Loading configuration for environment '$environment'."
    addProjectPropertiesFromFile(file("$rootDir/env-properties/${environment}/settings.properties"))
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}

allprojects {

    group = 'se.inera.privatlakarportal'

    if (System.env.BUILD_VERSION && System.env.BUILD_NUMBER) {
        if (System.env.BRANCH == 'develop' || System.env.BRANCH.contains('feature')) {
            version = "$System.env.BUILD_VERSION-b$System.env.BUILD_NUMBER"
        } else if (System.env.BRANCH.contains('release')) {
            version = "$System.env.BUILD_VERSION"
        } else {
            throw new GradleScriptException("git branch '$System.env.BRANCH' is not known as a buildable branch. Builds must be performed from develop, release/ or feature/ branches.", null)
        }
    } else {
        version = '1.0.0-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/thirdparty/" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }

    }
    buildscript {
        repositories {
            mavenLocal()
            maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
            jcenter()
        }
    }
    
}

if (project.hasProperty('runSonar')) {
    apply plugin: 'sonar-runner'
    sonarRunner {
        sonarProperties {
            property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
            property "sonar.projectName", projectName
            property "sonar.projectKey", projectId

            // Address of SonarQube server
            property "sonar.host.url", "https://build-inera.nordicmedtest.se/sonar"

            ext.sonarPassword = System.properties['sonarPassword']

            // Database config
            property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
            property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
            property "sonar.jdbc.username", "sonar"
            property "sonar.jdbc.password", sonarPassword

            //Exclusions
            property "sonar.test.exclusions", "src/test/**"

            property "sonar.exclusions", [
                "file:**/generatedSource/**",
                "src/main/java/se/inera/privatlakarportal/**/config/**",
                "**/stub/**",
                "**/exception/**",
                "**/*Exception*.java",
                "**/*Fake*.java"
                ]

            project(":privatlakarportal-web") {
                sonarRunner {
                    sonarProperties {
                        property "sonar.javascript.lcov.reportPath", "$buildDir/karma/coverage/lcov/lcov.info"
                        property "sonar.sources", "${projectDir}/src/main/resources,${projectDir}/src/main/java,${projectDir}/src/main/webapp/app"
                    }
                }
            }

            //Skip these projects entirely
            project(":privatlakarportal-specifications") {
                sonarRunner {
                    skipProject = true
                }
            }
            project(":privatlakarportal-liquibase-runner") {
                sonarRunner {
                    skipProject = true
                }
            }
        }
    }
    
}

subprojects {
    apply plugin: 'java'

    if (project.hasProperty('codeQuality')) {
        apply from: rootProject.file("tools/codeQuality/codeQuality.gradle")
    }


    if (project.hasProperty('runSonar')) {
        apply plugin: 'jacoco'

        jacoco {
            toolVersion = "0.7.1.201405082137"
        }
        jacocoTestReport {
            
            classDirectories =  files(sourceSets.main.output)
            sourceDirectories = files(sourceSets.main.allJava.srcDirs)

            reports {
                xml.enabled false
                csv.enabled false
                html.destination "${buildDir}/jacocoHtml"
            }
        }
        
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    ext {
        cxfVersion = '3.1.3'
        springContextVersion = "4.2.2.RELEASE"
        springSecurityVersion = "4.0.3.RELEASE"
        springSecurityExtensionsVersion = "1.0.1.RELEASE"
        liquibaseVersion = "3.3.1"
        jaxb2Version = "0.9.5"

        setProperty("buildTime", getDate().toString())
        setProperty("buildNumber", System.env.BUILD_NUMBER ? System.env.BUILD_NUMBER : "SNAPSHOT")
        setProperty("buildVersion", System.env.BUILD_VERSION ? System.env.BUILD_VERSION : "1.0.0-SNAPSHOT")
    }
}

private void addProjectPropertiesFromFile(propfile) {
    if (propfile.exists()) {
        def props = new Properties();
        propfile.withInputStream { props.load(it) }
        allprojects { subproject ->
            props.each { key, value ->
                subproject.ext.setProperty(key, value.toString())
            }
        }
    } else {
        throw new GradleScriptException("File '${propfile.path}' does not exist.", null)
    }
}

configure (subprojects.findAll {
    [
        'privatlakarportal-liquibase-runner',
        'privatlakarportal-web'
    ].contains(it.name) }) {

    apply plugin: 'maven'

    configurations { deployerJars }

    dependencies { deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2" }

    ext.nexusUsername = System.properties['nexusUsername']
    ext.nexusPassword = System.properties['nexusPassword']

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                uniqueVersion = false
            }
        }
    }
}
