buildscript {
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'se.inera.intyg:gradle-fitnesse-plugin:1.0.+'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.12'
    }
    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

// Load environment specific settings, if the -Penv=xxx parameter is given on invocation
task loadConfiguration {
    def environment = null
    if (project.hasProperty('env')) {
        environment = project.getProperty('env')
    } else {
        environment = "local"
    }
    logger.quiet "Loading configuration for environment '$environment'."
    addProjectPropertiesFromFile(file("$rootDir/env-properties/${environment}/settings.properties"))
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}

allprojects {

    group = 'se.inera.privatlakarportal'

    if (System.env.BUILD_VERSION && System.env.BUILD_NUMBER) {
        if (System.env.BRANCH == 'develop' || System.env.BRANCH.contains('feature')) {
            version = "$System.env.BUILD_VERSION-b$System.env.BUILD_NUMBER"
        } else if (System.env.BRANCH.contains('release')) {
            version = "$System.env.BUILD_VERSION"
        } else {
            throw new GradleScriptException("git branch '$System.env.BRANCH' is not known as a buildable branch. Builds must be performed from develop, release/ or feature/ branches.", null)
        }
    } else {
        version = '1.0.0-SNAPSHOT'
    }

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
            maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
            maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
            jcenter()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/thirdparty/" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    }
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", projectName
        property "sonar.projectKey", projectId
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        ext.sonarPassword = System.properties['sonarPassword']
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", [
            "file:**/generatedSource/**",
            "src/main/java/se/inera/privatlakarportal/**/config/**",
            "**/stub/**",
            "**/exception/**",
            "**/*Exception*.java",
            "**/*Fake*.java"
            ]
        property "sonar.javascript.lcov.reportPath", "build/karma/lcov.info"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'license'

    if (project.hasProperty('codeQuality')) {
        apply from: rootProject.file("tools/codeQuality/codeQuality.gradle")
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }
    jacocoTestReport {

        classDirectories =  files(sourceSets.main.output)
        sourceDirectories = files(sourceSets.main.allJava.srcDirs)

        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    ext {
        cxfVersion = '3.1.3'
        springContextVersion = "4.2.2.RELEASE"
        springSecurityVersion = "4.0.3.RELEASE"
        springSecurityExtensionsVersion = "1.0.1.RELEASE"
        liquibaseVersion = "3.3.1"
        jaxb2Version = "0.9.5"
        restAssuredVersion = "2.9.0"
        stringTemplateVersion = "4.0.8"
        junitVersion = "4.12"
        hamcrestVersion = "1.3"

        setProperty("buildTime", getDate().toString())
        setProperty("buildNumber", System.env.BUILD_NUMBER ? System.env.BUILD_NUMBER : "SNAPSHOT")
        setProperty("buildVersion", System.env.BUILD_VERSION ? System.env.BUILD_VERSION : "1.0.0-SNAPSHOT")
    }

    license {
        ext.url = 'https://github.com/sklintyg/privatlakarportal'
        ext.name = rootProject.name
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        header rootProject.file("header.txt")
        includes(["**/*.xml", "**/main/java/se/inera/**/*.java"])
        excludes(["**/generatedSource/java/se/inera/**/*.java"])
    }
}

private void addProjectPropertiesFromFile(propfile) {
    if (propfile.exists()) {
        def props = new Properties();
        propfile.withInputStream { props.load(it) }
        allprojects { subproject ->
            props.each { key, value ->
                subproject.ext.setProperty(key, value.toString())
            }
        }
    } else {
        throw new GradleScriptException("File '${propfile.path}' does not exist.", null)
    }
}

configure (subprojects.findAll {
    [
        'privatlakarportal-liquibase-runner',
        'privatlakarportal-web'
    ].contains(it.name) }) {

    apply plugin: 'maven'

    configurations { deployerJars }

    dependencies { deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2" }

    ext.nexusUsername = System.properties['nexusUsername']
    ext.nexusPassword = System.properties['nexusPassword']

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                uniqueVersion = false
            }
        }
    }
}
