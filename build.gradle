ext {
    cxfVersion = '3.1.3'
    springContextVersion = "4.2.2.RELEASE"
    springSecurityVersion = "4.0.3.RELEASE"
    springSecurityExtensionsVersion = "1.0.1.RELEASE"
    liquibaseVersion = "3.3.1"
    jaxb2Version = "0.9.5"
    restAssuredVersion = "2.9.0"
    stringTemplateVersion = "4.0.8"
    junitVersion = "4.12"
    hamcrestVersion = "1.3"
}

// Load environment specific settings, if the -Penv=xxx parameter is given on invocation
task loadConfiguration {
    def environment = null
    if (project.hasProperty('env')) {
        environment = project.getProperty('env')
    } else {
        environment = "local"
    }
    logger.quiet "Loading configuration for environment '$environment'."
    addProjectPropertiesFromFile(file("$rootDir/env-properties/${environment}/settings.properties"))
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}

allprojects {
    group = 'se.inera.privatlakarportal'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    apply plugin: 'org.ajoberstar.grgit'

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
            maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
            maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
            jcenter()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/thirdparty/" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'license'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(dependsOn: processResources) {
        def propertyFile = "${buildDir}/resources/main/version.properties"
        def projectVersion = rootProject.version
        def gitCommit = grgit.head().id
        def gitBranch = grgit.branch.getCurrent().getName()
        def buildNumber = System.env.BUILD_NUMBER ?: "SNAPSHOT"

        inputs.property("project.version", projectVersion)
        inputs.property("gitCommit", gitCommit)
        inputs.property("gitBranch", gitBranch)
        inputs.property("buildNumber", buildNumber)
        outputs.file(propertyFile)

        doLast {
            ant.touch(file: propertyFile, mkdirs: "true")
            ant.propertyfile(file: propertyFile) {
                entry(key: 'project.version', default: projectVersion)
                entry(key: 'gitCommit', default: gitCommit)
                entry(key: 'gitBranch', default: gitBranch)
                entry(key: 'buildNumber', default: buildNumber)
                entry(key: 'buildTime', default: getDate())
            }
        }
    }

    jar.dependsOn(createVersionPropertyFile)

    if (project.hasProperty('codeQuality')) {
        apply from: rootProject.file("tools/codeQuality/codeQuality.gradle")
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    license {
        ext.url = 'https://github.com/sklintyg/privatlakarportal'
        ext.name = rootProject.name
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        header rootProject.file("header.txt")
        includes(["**/*.xml", "**/main/java/se/inera/**/*.java"])
        excludes(["**/generatedSource/java/se/inera/**/*.java"])
    }
}

task tagRelease {
    description = 'Tags the current head with the projects version.'
    def grgit = org.ajoberstar.grgit.Grgit.open(creds: new org.ajoberstar.grgit.Credentials(System.properties['githubUser'], System.properties['githubPassword']))
    doLast {
        grgit.tag.add {
            name = "v" + version
            message = "Release of ${version}"
        }
        grgit.push(tags: true)
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test // Include the results from the 'test' task in all subprojects
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", projectName
        property "sonar.projectKey", projectId
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        ext.sonarPassword = System.properties['sonarPassword']
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", [
            "file:**/generatedSource/**",
            "src/main/java/se/inera/privatlakarportal/**/config/**",
            "**/stub/**",
            "**/exception/**",
            "**/*Exception*.java",
            "**/*Fake*.java"
            ]
        property "sonar.javascript.lcov.reportPath", "build/karma/lcov.info"
    }
}

private void addProjectPropertiesFromFile(propfile) {
    if (propfile.exists()) {
        def props = new Properties();
        propfile.withInputStream { props.load(it) }
        allprojects { subproject ->
            props.each { key, value ->
                subproject.ext.setProperty(key, value.toString())
            }
        }
    } else {
        throw new GradleScriptException("File '${propfile.path}' does not exist.", null)
    }
}

configure (subprojects.findAll {
    [
        'privatlakarportal-liquibase-runner',
        'privatlakarportal-web'
    ].contains(it.name) }) {

    apply plugin: 'maven'

    configurations { deployerJars }

    dependencies { deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2" }

    ext.nexusUsername = System.properties['nexusUsername']
    ext.nexusPassword = System.properties['nexusPassword']

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots") {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                uniqueVersion = false
            }
        }
    }
}

buildscript {
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
        classpath 'org.akhikhl.gretty:gretty:+'
        classpath 'se.inera.intyg:gradle-fitnesse-plugin:1.0.+'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.12'
        classpath 'org.ajoberstar:gradle-git:1.5.1'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }
    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}